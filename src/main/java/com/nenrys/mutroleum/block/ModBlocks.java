package com.nenrys.mutroleum.block;

import com.nenrys.mutroleum.Mutroleum;
import com.nenrys.mutroleum.fluid.DMBlock;
import com.nenrys.mutroleum.fluid.ModFluids;
import com.nenrys.mutroleum.item.ModItems;
import com.nenrys.mutroleum.misc.ModCreativeModeTab;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.LiquidBlock;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.material.Material;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

import java.util.function.Supplier;

public class ModBlocks {
    public static final DeferredRegister<Block> BLOCKS =
            DeferredRegister.create(ForgeRegistries.BLOCKS, Mutroleum.MOD_ID);

    //blocks
    public static final RegistryObject<Block> P_MUTROLEUM_BLOCK = registerBlock("p_mutroleum_block",
            () -> new PetrifiedMutroleumBlock(BlockBehaviour.Properties.of(Material.STONE)
                    .requiresCorrectToolForDrops().randomTicks()),
            ModCreativeModeTab.MUTROLEUM_TAB);

    //autogenerated blocks, do not change __0__
	public static final RegistryObject<Block> MUTROLEUM_ORE_DEEPSLATE = registerBlock("mutroleum_ore_deepslate", 
		    () -> new Block(BlockBehaviour.Properties.of(Material.STONE)), ModCreativeModeTab.MUTROLEUM_TAB);
	public static final RegistryObject<Block> MUTROLEUM_ORE = registerBlock("mutroleum_ore", 
		    () -> new Block(BlockBehaviour.Properties.of(Material.STONE)), ModCreativeModeTab.MUTROLEUM_TAB);

    private static <T extends Block> RegistryObject<T> registerBlock(String name, Supplier<T> block,
                                                                     CreativeModeTab tab) {
        RegistryObject<T> toReturn = BLOCKS.register(name, block);
        registerBlockItem(name, toReturn, tab);

        return toReturn;
    }
    private static <T extends Block> RegistryObject<Item> registerBlockItem(String name, RegistryObject<T> block,
                                                                            CreativeModeTab tab) {
        return ModItems.ITEMS.register(name, () -> new BlockItem(block.get(),
                new Item.Properties().tab(tab)));
    }

    public static final RegistryObject<LiquidBlock> DM_BLOCK = BLOCKS.register("dm_block",
            () -> new DMBlock(ModFluids.SOURCE_DM, BlockBehaviour.Properties.copy(Blocks.WATER)));



    public static void register(IEventBus eventBus) {
        BLOCKS.register(eventBus);
    }
}