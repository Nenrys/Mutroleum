package com.nenrys.mutroleum.block;

import com.nenrys.mutroleum.Mutroleum;
import com.nenrys.mutroleum.fluid.DMBlock;
import com.nenrys.mutroleum.fluid.ModFluids;
import com.nenrys.mutroleum.item.ModItems;
import com.nenrys.mutroleum.misc.ModCreativeModeTab;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.LiquidBlock;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.material.Material;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

import java.util.function.Supplier;

public class ModBlocks {
    public static final DeferredRegister<Block> BLOCKS =
            DeferredRegister.create(ForgeRegistries.BLOCKS, Mutroleum.MOD_ID);

    //blocks
    public static final RegistryObject<Block> P_MUTROLEUM_BLOCK = registerBlock("p_mutroleum_block",
            () -> new PetrifiedMutroleumBlock(BlockBehaviour.Properties.of(Material.STONE)
                    .requiresCorrectToolForDrops().randomTicks().requiresCorrectToolForDrops().strength(3.0F, 3.0F)),
            ModCreativeModeTab.MUTROLEUM_TAB);

    //autogenerated blocks, do not change __0__
	public static final RegistryObject<Block> MUTROLEUM_ORE_DEEPSLATE = registerBlock("mutroleum_ore_deepslate", 
		    () -> new Block(BlockBehaviour.Properties.of(Material.STONE)), ModCreativeModeTab.MUTROLEUM_TAB);
	public static final RegistryObject<Block> MUTROLEUM_ORE = registerBlock("mutroleum_ore", 
		    () -> new Block(BlockBehaviour.Properties.of(Material.STONE)), ModCreativeModeTab.MUTROLEUM_TAB);

    private static <T extends Block> RegistryObject<T> registerBlock(String name, Supplier<T> block,
                                                                     CreativeModeTab tab) {
        RegistryObject<T> toReturn = BLOCKS.register(name, block);
        registerBlockItem(name, toReturn, tab);

        return toReturn;
    }
    private static <T extends Block> RegistryObject<Item> registerBlockItem(String name, RegistryObject<T> block,
                                                                            CreativeModeTab tab) {
        return ModItems.ITEMS.register(name, () -> new BlockItem(block.get(),
                new Item.Properties().tab(tab)));
    }

    public static final RegistryObject<LiquidBlock> DM_BLOCK_WHITE = BLOCKS.register("dm_block_white", () -> new DMBlock(ModFluids.SOURCE_DM_WHITE, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_LIGHT_GRAY = BLOCKS.register("dm_block_light_gray", () -> new DMBlock(ModFluids.SOURCE_DM_LIGHT_GRAY, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_GRAY = BLOCKS.register("dm_block_gray", () -> new DMBlock(ModFluids.SOURCE_DM_GRAY, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_BLACK = BLOCKS.register("dm_block_black", () -> new DMBlock(ModFluids.SOURCE_DM_BLACK, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_PINK = BLOCKS.register("dm_block_pink", () -> new DMBlock(ModFluids.SOURCE_DM_PINK, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_RED = BLOCKS.register("dm_block_red", () -> new DMBlock(ModFluids.SOURCE_DM_RED, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_MAGENTA = BLOCKS.register("dm_block_magenta", () -> new DMBlock(ModFluids.SOURCE_DM_MAGENTA, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_PURPLE = BLOCKS.register("dm_block_purple", () -> new DMBlock(ModFluids.SOURCE_DM_PURPLE, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_BLUE = BLOCKS.register("dm_block_blue", () -> new DMBlock(ModFluids.SOURCE_DM_BLUE, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_LIGHT_BLUE = BLOCKS.register("dm_block_light_blue", () -> new DMBlock(ModFluids.SOURCE_DM_LIGHT_BLUE, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_CYAN = BLOCKS.register("dm_block_cyan", () -> new DMBlock(ModFluids.SOURCE_DM_CYAN, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_GREEN = BLOCKS.register("dm_block_green", () -> new DMBlock(ModFluids.SOURCE_DM_GREEN, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_LIME = BLOCKS.register("dm_block_lime", () -> new DMBlock(ModFluids.SOURCE_DM_LIME, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_YELLOW = BLOCKS.register("dm_block_yellow", () -> new DMBlock(ModFluids.SOURCE_DM_YELLOW, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_ORANGE = BLOCKS.register("dm_block_orange", () -> new DMBlock(ModFluids.SOURCE_DM_ORANGE, BlockBehaviour.Properties.copy(Blocks.WATER)));
    public static final RegistryObject<LiquidBlock> DM_BLOCK_BROWN = BLOCKS.register("dm_block_brown", () -> new DMBlock(ModFluids.SOURCE_DM_BROWN, BlockBehaviour.Properties.copy(Blocks.WATER)));



    public static void register(IEventBus eventBus) {
        BLOCKS.register(eventBus);
    }
}